class <%= @rails.resource.search_class_name %>
  include ActiveModel::Model

  attr_accessor(
    <% @rails.controller.search_fields.map do |field_name| %>
      <%=
      if @rails.resource.fields[field_name] == 'belongs_to'
        ":#{field_name}_id,"
      else
        ":#{field_name},"
      end
      -%>
    <% end %>
  )

  <% @rails.controller.search_fields.select { |search_filed| @rails.resource.fields[search_filed] == 'integer' }.each do |search_filed| %>
    <%=
    "validates :#{search_filed}, numericality: { only_integer: true }, allow_blank: true"
    -%>
  <% end %>

  def initialize *args
    @relation = <%= @rails.resource.class_name_with_modules %>
    super *args
  end

  def results
    <% resource_name = @rails.resource.name.pluralize %>
    <%= resource_name -%> = @relation

    if valid?
    <% @rails.controller.search_fields.each do |field_name| %>
      <%=
      case @rails.resource.fields[field_name]
      when 'string', 'text'
        "#{resource_name} = #{resource_name}.where(\"#{field_name} LIKE ?\", \"%\#{#{field_name}}%\") if #{field_name}.present?"
      when 'boolean'
        "#{resource_name} = #{resource_name}.where(#{field_name}: true) if #{field_name} == '1'"
      when 'belongs_to'
        "#{resource_name} = #{resource_name}.where(#{field_name}_id: #{field_name}_id) if #{field_name}_id.present?"
      when 'int', 'integer'
        "#{resource_name} = #{resource_name}.where(#{field_name}: #{field_name}.to_i) if #{field_name}.present?"
      else
        "#{resource_name} = #{resource_name}.where(#{field_name}: #{field_name}) if #{field_name}.present?"
      end
      -%>
    <% end %>

      if <%= @rails.resource.class_name_with_modules -%>.attribute_names.include?('updated_at')
        <%= resource_name %>.order(updated_at: :desc)
      else
        <%= resource_name %>
      end
    end
  end
end